!!! html
%html(lang="en")
  %head
    %title Pingpong
    %meta(name='viewport' content='width=device-width, intial-scale=1')
    %link(href='css/normalize.css' rel='stylesheet')
    %link(href='css/style.css' rel='stylesheet')
%body
  .container
    %h1
      %a.logo(href='#')
        %img(src="img/pingpong-wide.svg" alt="Pingpong")

    %iframe(src="http://ghbtns.com/github-btn.html?user=keenlabs&repo=pingpong&type=watch&count=true&size=large" allowtransparency="true" frameborder="0" scrolling="0" width="152" height="30")

    :markdown

      ### Easy & Powerful HTTP Request-Response Analytics

      Pingpong is an open-source monitoring framework for anything with a URL. Pingpong is especially well-suited for tracking performance and availability across families of servers.

      ### **[See the project on GitHub &rarr;](https://github.com/keenlabs/pingpong)**
      ### **[See a live Pingpong instance &rarr;](http://api-pong.herokuapp.com)**

      ### How does it work?

      Pingpong makes HTTP requests to URLs you configure, as frequently as once per second. Pingpong turns data about each request and response into JSON, then logs it to a configurable destination.

      The default destination is Keen IO's [analytics API](https://keen.io/docs/). Keen's API supports capturing events, running queries, and creating visualizations. Pingpong ships with an HTML dashboard built on Keen that shows the following metrics:

      + HTTP response status breakdown by URL
      + Response time breakdown by URL
      + Errors and long-running requests

      Pingpong captures most of the data you'd want about HTTP requests and responses, but it also makes it easy to add custom properties specific to your infrastructure.

      See a [live Pingpong instance](http://api-pong.herokuapp.com) that tracks the response time of popular API providers.

      ### Setup and Deployment

      Pingpong is open source and licensed under [MIT](https://github.com/keenlabs/pingpong/blob/master/LICENSE).

      Pingpong is easy to install. It is written in Ruby and streamlined for deployment to one or more Heroku regions. That said, you can run it on any computer with Ruby, including your local machine.

      ### Inspiration

      Pingpong was developed in-house at Keen IO to answer a few simple, but important, questions about our web and API infrastructure:

      + Are any API servers or server processes slower than others?
      + Are any web pages or API calls slow? Are any experiencing errors?
      + Have any processes failed, or become unresponsive? Today? This month?
      + What's the latency to each DC from a client in the US? In Europe?
      + How much latency does using SSL add?

      Pingpong runs all day, every day from multiple data centers around the world, helping our team understand current performance and study long term trends. To date, Pingpong has run over 19,693,312 checks in production!

      While agent-based application monitoring tools like New Relic are also useful (we're big fans!), some things need to be measured from a real client exactly 1 Internet away. Additionally, few monitoring tools allow drill-downs over custom dimensions, or give the ability to create dashboards from arbitrary queries.

      ### Helpful links

      + [Pingpong Github Project](https://github.com/keenlabs/pingpong)
      + [Keen IO docs](https://keen.io)
      + [Keen IO Heroku add-on](https://addons.heroku.com/keen)


  <script src="/static/js/jquery.js" type="text/javascript"></script>
  <script src="/static/js/jquery-cookie.js" type="text/javascript"></script>
  <script src="/static/js/purl.js" type="text/javascript"></script>
  <script src="/static/js/ua-parser.js" type="text/javascript"></script>
  <script src="http://www.broofa.com/Tools/Math.uuid.js"></script>

:javascript
  var Keen=Keen||{configure:function(e){this._cf=e},addEvent:function(e,t,n,i){this._eq=this._eq||[],this._eq.push([e,t,n,i])},setGlobalProperties:function(e){this._gp=e},onChartsReady:function(e){this._ocrq=this._ocrq||[],this._ocrq.push(e)}};(function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://":"http://")+"dc8na2hxrj29i.cloudfront.net/code/keen-2.1.2-min.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)})();

  // Configure the Keen object with your Project ID and (optional) access keys.
  Keen.configure({
      projectId: "53a0eeb836bf5a41a8000001",
      writeKey: "fd5890a22352546f6ec5064dd46e7d81d69c9dc612288f5766f8782107743fad1f79f75cdc5e7089456e275dda70ce3d59969314076850892472dd5a19be4383a35555def33828a19748873eeac33b45f5415bc90c80d4e8d5966da9649d5410e11df318af575a15509b1c0eef3a1c3c"
  });

  $(document).ready(function(){

      //Configure the jQuery cookie plugin to use JSON.
      $.cookie.json = true;

      //Set the amount of time a session should last.
      var sessionExpireTime = new Date();
      sessionExpireTime.setMinutes(sessionExpireTime.getMinutes()+30);

      //Check if we have a session cookie:
      var session_cookie = $.cookie("session_cookie");

      //If it is undefined, set a new one.
      if(session_cookie == undefined){
          $.cookie("session_cookie", {
              id: Math.uuid()
          }, {
              expires: sessionExpireTime,
              path: "/" //Makes this cookie readable from all pages
          });
      }
      //If it does exist, delete it and set a new one with new expiration time
      else{
          $.removeCookie("session_cookie", {
              path: "/"
          });
          $.cookie("session_cookie", session_cookie, {
              expires: sessionExpireTime,
              path: "/"
          });
      }

      var permanent_cookie = $.cookie("permanent_cookie");

      //If it is undefined, set a new one.
      if(permanent_cookie == undefined){
          $.cookie("permanent_cookie", {
              id: Math.uuid()
          }, {
              expires: 3650, //10 year expiration date
              path: "/" //Makes this cookie readable from all pages
          });
      }

      //Add a pageview event in Keen IO
      var fullUrl = window.location.href;
      var parsedUrl = $.url(fullUrl);
      var parser = new UAParser();

      var eventProperties = {
          session_id: $.cookie("session_cookie")["id"],
          url: {
              source: parsedUrl.attr("source"),
              protocol: parsedUrl.attr("protocol"),
              domain: parsedUrl.attr("host"),
              port: parsedUrl.attr("port"),
              path: parsedUrl.attr("path"),
              anchor: parsedUrl.attr("anchor")
          },
          user_agent: {
              browser: parser.getBrowser(),
              engine: parser.getEngine(),
              os: parser.getOS()
          },
          permanent_tracker: $.cookie("permanent_cookie")["id"]
      };

      /*
      //If you know that the user is currently logged in, add information about the user.
      eventProperties["user"] = {
          id: "",
          signupDate: ""
          etc: ".."
      };
      */

      //Add information about the referrer of the same format as the current page
      var referrer = document.referrer;
      referrerObject = null;

      if(referrer != undefined){
          parsedReferrer = $.url(referrer);

          referrerObject = {
              source: parsedReferrer.attr("source"),
              protocol: parsedReferrer.attr("protocol"),
              domain: parsedReferrer.attr("host"),
              port: parsedReferrer.attr("port"),
              path: parsedReferrer.attr("path"),
              anchor: parsedReferrer.attr("anchor")
          }
      }

      eventProperties["referrer"] = referrerObject;

      Keen.addEvent("pageviews", eventProperties)

  });
